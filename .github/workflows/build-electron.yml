name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write # This grants write permission for the entire workflow

jobs:
  build:
    # Only run for non-release tags (release tags are handled by release-signed.yml)
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-release')
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            arch: 'x64,arm64'
          - os: windows-latest
            platform: win
            arch: 'x64'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm run setup

      - name: Install Python (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install node-gyp (Windows)
        if: matrix.os == 'windows-latest'
        run: npm install -g node-gyp

      - name: Create environment files
        env:
          GOOGLE_CLIENT_ID: ${{ vars.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        run: |
          # Create client .env file
          echo "REACT_APP_API_URL=http://localhost:3001/api" >> client/.env

          # Create server .env file
          echo "DATABASE_URL=file:./production.db" > server/.env
          echo "DB_TYPE=embedded" >> server/.env
          echo "NODE_ENV=production" >> server/.env
          echo "PORT=3001" >> server/.env
          echo "FRONTEND_URL=http://localhost:3000" >> server/.env
          echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> server/.env
          # Only add client secret if it's provided (Desktop apps don't need it)
          if [ -n "${GOOGLE_CLIENT_SECRET}" ]; then
            echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> server/.env
          fi
          echo "GOOGLE_REDIRECT_URI_WEB=http://localhost:3000/auth/google/callback" >> server/.env
          echo "GOOGLE_REDIRECT_URI_ELECTRON=http://localhost:3000/auth/google/callback" >> server/.env
          echo "ELECTRON=true" >> server/.env
          
          # Create Electron config file
          echo "{" > electron/config.json
          echo "  \"googleClientId\": \"${GOOGLE_CLIENT_ID}\"," >> electron/config.json
          echo "  \"apiUrl\": \"http://localhost:3001/api\"," >> electron/config.json
          echo "  \"redirectUri\": \"http://localhost:8080/callback\"," >> electron/config.json
          echo "  \"isDevelopment\": false" >> electron/config.json
          echo "}" >> electron/config.json

      - name: Build application
        run: npm run prepare:electron

      - name: Build Electron app (macOS)
        if: matrix.platform == 'mac'
        run: npm run dist:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false  # Disable code signing for now
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # For auto-updater
          
      - name: Build Electron app (Windows)
        if: matrix.platform == 'win'
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # For auto-updater

      - name: List build artifacts
        shell: bash
        run: ls -la dist-electron/

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            dist-electron/*.dmg
            dist-electron/*.dmg.blockmap
            dist-electron/latest-mac.yml

      - name: Upload Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            dist-electron/*.exe
            dist-electron/*.exe.blockmap
            dist-electron/latest.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installers
          path: dist-electron/

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installers
          path: dist-electron/

      - name: List all artifacts
        shell: bash
        run: ls -la dist-electron/

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from tag (remove 'v' prefix and any '-release' suffix)
          RAW_VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${RAW_VERSION#v}
          VERSION=${VERSION%-release}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "raw_version=${RAW_VERSION}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: OTI Scheduler ${{ steps.version.outputs.version }}
          fail_on_unmatched_files: false
          make_latest: true
          body: |
            ## OTI Scheduler ${{ steps.version.outputs.version }}
            
            ### Desktop Application Downloads
            
            **macOS:**
            - Universal build (Intel + Apple Silicon): `oti-scheduler-${{ steps.version.outputs.version }}.dmg`
            - Apple Silicon only: `oti-scheduler-${{ steps.version.outputs.version }}-arm64.dmg`
            
            **Windows:**
            - 64-bit installer: `oti-scheduler Setup ${{ steps.version.outputs.version }}.exe`
            
            ### Installation Instructions
            
            **macOS:**
            1. Download the appropriate DMG file
            2. Open the DMG and drag "oti-scheduler" to Applications
            3. Launch from Applications folder
            
            **Windows:**
            1. Download the EXE installer
            2. Run the installer and follow the setup wizard
            3. Launch from Desktop shortcut or Start Menu
            
            ### Features
            - Self-contained application with embedded database
            - No external dependencies required
            - Automatic scheduling algorithm
            - Employee and room management
            - Hebrew interface optimized for Israeli kindergartens
            
            ### System Requirements
            - **macOS**: 10.12+ (Sierra or later)
            - **Windows**: Windows 10/11 (64-bit)
            
            For technical documentation, see [ELECTRON.md](https://github.com/ygaller/oti-scheduler/blob/master/ELECTRON.md)
          draft: false
          prerelease: false
          files: |
            dist-electron/oti-scheduler-${{ steps.version.outputs.version }}.dmg
            dist-electron/oti-scheduler-${{ steps.version.outputs.version }}-arm64.dmg
            dist-electron/oti-scheduler Setup ${{ steps.version.outputs.version }}.exe

  notify:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "âœ… Release ${{ steps.version.outputs.version }} created successfully!"
          echo "ðŸ”— Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
