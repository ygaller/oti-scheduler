name: Release Signed Electron App

on:
  push:
    tags:
      - 'v*.*.*-release'  # Only for official releases with -release suffix
  release:
    types: [created, published]  # Trigger when release is created (drafted) or published
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-signed:
    # Only run for -release tags or manual workflow dispatch
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && contains(github.ref, '-release')) ||
      (github.event_name == 'release' && contains(github.event.release.tag_name, '-release'))
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            arch: 'x64,arm64'
          - os: windows-latest
            platform: win
            arch: 'x64'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm run setup

      # macOS Code Signing Setup
      - name: Setup macOS certificates
        if: matrix.platform == 'mac'
        env:
          APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -n "${{ env.APPLE_CERT_DATA }}" ]; then
            echo "Setting up macOS code signing..."
            echo ${{ env.APPLE_CERT_DATA }} | base64 --decode > certificate.p12
            security create-keychain -p mypassword build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p mypassword build.keychain
            security import certificate.p12 -k build.keychain -P ${{ env.APPLE_CERT_PASSWORD }} -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k mypassword build.keychain
            rm certificate.p12
          else
            echo "⚠️ No Apple certificates found. Building without code signing."
          fi

      # Windows Code Signing Setup
      - name: Setup Windows certificates
        if: matrix.platform == 'win'
        env:
          WINDOWS_CERT_DATA: ${{ secrets.WINDOWS_CERT_DATA }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          if ("${{ env.WINDOWS_CERT_DATA }}") {
            Write-Host "Setting up Windows code signing..."
            $certBytes = [Convert]::FromBase64String("${{ env.WINDOWS_CERT_DATA }}")
            [IO.File]::WriteAllBytes("certificate.p12", $certBytes)
            Write-Host "Certificate prepared for signing"
          } else {
            Write-Host "⚠️ No Windows certificates found. Building without code signing."
          }
        shell: powershell

      - name: Build application
        run: npm run prepare:electron

      - name: Build and sign Electron app (macOS)
        if: matrix.platform == 'mac'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -n "${{ env.APPLE_ID }}" ]; then
            echo "Building with notarization..."
            node scripts/build-electron.js && npx electron-builder --mac --publish=never
          else
            echo "Building without notarization..."
            CSC_IDENTITY_AUTO_DISCOVERY=false node scripts/build-electron.js && npx electron-builder --mac --publish=never
          fi

      - name: Build and sign Electron app (Windows)
        if: matrix.platform == 'win'
        env:
          WINDOWS_CERT_FILE: certificate.p12
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          if (Test-Path "certificate.p12") {
            Write-Host "Building with code signing..."
            node scripts/build-electron.js
            npx electron-builder --win --publish=never
            Remove-Item "certificate.p12" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Building without code signing..."
            node scripts/build-electron.js
            npx electron-builder --win --publish=never
          }
        shell: powershell

      - name: List build artifacts
        shell: bash
        run: ls -la dist-electron/

      - name: Upload signed macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: macos-signed-installers
          path: |
            dist-electron/*.dmg
            dist-electron/*.dmg.blockmap
            dist-electron/latest-mac.yml

      - name: Upload signed Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-signed-installers
          path: |
            dist-electron/*.exe
            dist-electron/*.exe.blockmap
            dist-electron/latest.yml

  release-signed:
    needs: build-signed
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-signed-installers
          path: dist-electron/

      - name: Download Windows signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-signed-installers
          path: dist-electron/

      - name: Extract version from tag, release, or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: List downloaded artifacts
        shell: bash
        run: ls -la dist-electron/

      - name: Update Release with Signed Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: OTI Scheduler ${{ steps.version.outputs.version }} (Signed)
          body: |
            ## OTI Scheduler ${{ steps.version.outputs.version }} - Signed Release
            
            ### Desktop Application Downloads (Code Signed)
            
            **macOS:**
            - Universal build (Intel + Apple Silicon): `oti-scheduler-${{ steps.version.outputs.version }}.dmg`
            - Apple Silicon only: `oti-scheduler-${{ steps.version.outputs.version }}-arm64.dmg`
            
            **Windows:**
            - 64-bit installer: `oti-scheduler Setup ${{ steps.version.outputs.version }}.exe`
            
            ### Installation Instructions
            
            **macOS:**
            1. Download the appropriate DMG file
            2. Open the DMG and drag "oti-scheduler" to Applications
            3. Launch from Applications folder (code signed and notarized)
            
            **Windows:**
            1. Download the EXE installer
            2. Run the installer and follow the setup wizard (code signed)
            3. Launch from Desktop shortcut or Start Menu
            
            ### Features
            - **Code Signed**: All binaries are digitally signed for security
            - **macOS Notarized**: Approved by Apple for Gatekeeper
            - **Windows Signed**: EV Certificate for Windows SmartScreen
            - Self-contained application with embedded database
            - No external dependencies required
            - Automatic scheduling algorithm
            - Employee and room management
            - Hebrew interface optimized for Israeli kindergartens
            
            ### System Requirements
            - **macOS**: 10.12+ (Sierra or later)
            - **Windows**: Windows 10/11 (64-bit)
            
            For technical documentation, see [ELECTRON.md](https://github.com/ygaller/oti-scheduler/blob/master/ELECTRON.md)
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          make_latest: true
          files: |
            dist-electron/*.dmg
            dist-electron/*.exe
