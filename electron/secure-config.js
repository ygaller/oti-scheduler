const { app } = require('electron');
const path = require('path');
const fs = require('fs');

class SecureConfigManager {
  constructor() {
    // Set the USER_DATA_PATH for the server's SecretManager
    process.env.USER_DATA_PATH = app.getPath('userData');
  }

  // Load configuration from config.json file
  loadConfig() {
    try {
      const configPath = path.join(__dirname, 'config.json');
      console.log(`[SecureConfig] Looking for config at: ${configPath}`);
      if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
        console.log('✅ Loaded Electron configuration from config.json');
        return config;
      }

      // Fallback: look for a user-specific config in the app data directory
      const userConfigPath = path.join(app.getPath('userData'), 'config.json');
      console.log(`[SecureConfig] Looking for user config at: ${userConfigPath}`);
      if (fs.existsSync(userConfigPath)) {
        const config = JSON.parse(fs.readFileSync(userConfigPath, 'utf8'));
        console.log('✅ Loaded Electron configuration from user data config.json');
        return config;
      }

      console.log('⚠️  No config.json found, using defaults');
      return {};
    } catch (error) {
      console.error('❌ Failed to load config.json:', error.message);
      return {};
    }
  }

  // Get all environment variables for the server
  getServerEnvironment() {
    const config = this.loadConfig();
    
    const env = {
      // Database
      DATABASE_URL: process.env.DATABASE_URL || "postgresql://postgres:postgres@localhost:5432/scheduling",
      DB_TYPE: process.env.DB_TYPE || 'embedded',
      DB_HOST: process.env.DB_HOST || 'localhost',
      DB_PORT: process.env.DB_PORT || '5432',
      DB_NAME: process.env.DB_NAME || 'scheduling',
      DB_USER: process.env.DB_USER || 'postgres',
      DB_PASSWORD: process.env.DB_PASSWORD || 'postgres',
      
      // Server
      PORT: process.env.PORT || '3001',
      NODE_ENV: process.env.NODE_ENV || 'production',
      FRONTEND_URL: process.env.FRONTEND_URL || 'http://localhost:3000',
      
      // Google OAuth (load from config.json if available)
      GOOGLE_CLIENT_ID: config.googleClientId || process.env.GOOGLE_CLIENT_ID || '',
      GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET || '', // Desktop apps don't need client secret (PKCE)
      GOOGLE_REDIRECT_URI_WEB: process.env.GOOGLE_REDIRECT_URI_WEB || 'http://localhost:3000/auth/google/callback',
      GOOGLE_REDIRECT_URI_ELECTRON: process.env.GOOGLE_REDIRECT_URI_ELECTRON || 'http://localhost:8080/callback',
      GOOGLE_REDIRECT_URI: config.redirectUri || process.env.GOOGLE_REDIRECT_URI || 'http://localhost:8080/callback',
      
      // Security (JWT_SECRET is now auto-generated by SecretManager)
      
      // Electron specific
      ELECTRON: 'true',
      USER_DATA_PATH: app.getPath('userData')
    };

    // Diagnostics: Log summary of env being passed to the server
    try {
      console.log('[SecureConfig] Server environment summary:');
      console.log(`  - userData: ${env.USER_DATA_PATH}`);
      console.log(`  - GOOGLE_CLIENT_ID: ${env.GOOGLE_CLIENT_ID ? env.GOOGLE_CLIENT_ID.substring(0, 10) + '...' : 'NOT SET'}`);
      console.log(`  - GOOGLE_REDIRECT_URI: ${env.GOOGLE_REDIRECT_URI}`);
      console.log(`  - GOOGLE_REDIRECT_URI_WEB: ${env.GOOGLE_REDIRECT_URI_WEB}`);
      console.log(`  - GOOGLE_REDIRECT_URI_ELECTRON: ${env.GOOGLE_REDIRECT_URI_ELECTRON}`);
    } catch (_) {}

    return env;
  }

  // Clean up secrets (for uninstall) - delegates to server's SecretManager
  cleanup() {
    // The server's SecretManager will handle cleanup when USER_DATA_PATH is set
    console.log('Cleanup will be handled by server SecretManager');
  }
}

module.exports = { SecureConfigManager };
