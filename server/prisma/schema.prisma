// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id            String     @id @default(uuid())
  name          String     @unique
  roleStringKey String     @unique @map("role_string_key") // Format: "role_1", "role_2", etc.
  isActive      Boolean    @default(true) @map("is_active")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  
  // Relations
  employees     Employee[]
  
  @@map("roles")
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}

model Employee {
  id                  String     @id @default(uuid())
  firstName           String     @map("first_name")
  lastName            String     @map("last_name")
  roleId              String     @map("role_id")
  weeklySessionsCount Int        @map("weekly_sessions_count")
  workingHours        Json       @map("working_hours") // Store as JSON: { sunday: { startTime: "08:00", endTime: "16:00" }, ... }
  color               String     @default("#845ec2") // Hex color for visual identification
  isActive            Boolean    @default(true) @map("is_active")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  
  // Relations
  role                Role           @relation(fields: [roleId], references: [id], onDelete: Restrict)
  sessionEmployees    SessionEmployee[]
  
  @@map("employees")
}

model Patient {
  id                    String     @id @default(uuid())
  firstName             String     @map("first_name")
  lastName              String     @map("last_name")
  color                 String     @default("#845ec2") // Hex color for visual identification
  therapyRequirements   Json       @default("{}") @map("therapy_requirements") // Store as JSON: { "role_1": 2, "role_2": 1, ... }
  isActive              Boolean    @default(true) @map("is_active")
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")
  
  // Relations
  sessionPatients       SessionPatient[]
  
  @@map("patients")
}

model Room {
  id        String     @id @default(uuid())
  name      String
  color     String     @default("#845ec2") // Hex color for visual identification
  isActive  Boolean    @default(true) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  
  // Relations
  sessions  Session[]
  
  @@map("rooms")
}



model Schedule {
  id          String    @id @default(uuid())
  generatedAt DateTime  @map("generated_at") @default(now())
  isActive    Boolean   @default(false) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  sessions    Session[]
  
  @@map("schedules")
}



model Activity {
  id           String    @id @default(uuid())
  name         String    // e.g., "ארוחת בוקר", "מפגש צוות", "הפסקת קפה"
  color        String    @default("#ff6b6b") // Hex color for visual identification
  defaultStartTime String? @map("default_start_time") // Optional default HH:mm format
  defaultEndTime   String? @map("default_end_time")   // Optional default HH:mm format
  dayOverrides Json      @default("{}") @map("day_overrides") // JSON: { "monday": { "startTime": "12:30", "endTime": "13:30" }, "tuesday": null }
  isBlocking   Boolean   @default(false) @map("is_blocking") // Whether this activity should block session scheduling
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  @@map("activities")
}

model Session {
  id         String   @id @default(uuid())
  roomId     String   @map("room_id")
  scheduleId String   @map("schedule_id") // Required - sessions must belong to a schedule
  day        WeekDay
  startTime  String   @map("start_time") // Store as "HH:mm" format
  endTime    String   @map("end_time")   // Store as "HH:mm" format
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  room            Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  schedule        Schedule        @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  sessionEmployees SessionEmployee[]
  sessionPatients SessionPatient[]
  
  @@map("sessions")
}

model SessionEmployee {
  id         String   @id @default(uuid())
  sessionId  String   @map("session_id")
  employeeId String   @map("employee_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  // Ensure unique combination of session and employee
  @@unique([sessionId, employeeId])
  @@map("session_employees")
}

model SessionPatient {
  id        String   @id @default(uuid())
  sessionId String   @map("session_id")
  patientId String   @map("patient_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  // Ensure unique combination of session and patient
  @@unique([sessionId, patientId])
  @@map("session_patients")
}

